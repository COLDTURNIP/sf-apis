// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type Process struct {

	
	
		State SFObjectState
	

	
	
		Oid *OID
	

	
	
		Poid *UnionNullOID
	

	
	
		Ts int64
	

	
	
		Exe string
	

	
	
		ExeArgs string
	

	
	
		Uid int32
	

	
	
		UserName string
	

	
	
		Gid int32
	

	
	
		GroupName string
	

	
	
		Tty bool
	

	
	
		ContainerId *UnionNullString
	

}

const ProcessAvroCRC64Fingerprint = ":\x18\xbf\xbf\x92\xf1\x00_"

func NewProcess() (*Process) {
	return &Process{}
}

func DeserializeProcess(r io.Reader) (*Process, error) {
	t := NewProcess()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeProcessFromSchema(r io.Reader, schema string) (*Process, error) {
	t := NewProcess()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeProcess(r *Process, w io.Writer) error {
	var err error
	
	err = writeSFObjectState( r.State, w)
	if err != nil {
		return err
	}
	
	err = writeOID( r.Oid, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullOID( r.Poid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Ts, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.Exe, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.ExeArgs, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Uid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.UserName, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Gid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.GroupName, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteBool( r.Tty, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullString( r.ContainerId, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *Process) Serialize(w io.Writer) error {
	return writeProcess(r, w)
}

func (r *Process) Schema() string {
	return "{\"fields\":[{\"name\":\"state\",\"type\":{\"name\":\"SFObjectState\",\"namespace\":\"sysflow.type\",\"symbols\":[\"CREATED\",\"MODIFIED\",\"REUP\"],\"type\":\"enum\"}},{\"name\":\"oid\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"poid\",\"type\":[\"null\",\"sysflow.type.OID\"]},{\"name\":\"ts\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"exe\",\"type\":\"string\"},{\"name\":\"exeArgs\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"int\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"gid\",\"type\":\"int\"},{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"tty\",\"type\":\"boolean\"},{\"name\":\"containerId\",\"type\":[\"null\",\"string\"]}],\"name\":\"sysflow.entity.Process\",\"type\":\"record\"}"
}

func (r *Process) SchemaName() string {
	return "sysflow.entity.Process"
}

func (_ *Process) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Process) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Process) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Process) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Process) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Process) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Process) SetString(v string) { panic("Unsupported operation") }
func (_ *Process) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Process) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Int)(&r.State)
		
	
	case 1:
		
			r.Oid = NewOID()

		
		
			return r.Oid
		
	
	case 2:
		
			r.Poid = NewUnionNullOID()

		
		
			return r.Poid
		
	
	case 3:
		
		
			return (*types.Long)(&r.Ts)
		
	
	case 4:
		
		
			return (*types.String)(&r.Exe)
		
	
	case 5:
		
		
			return (*types.String)(&r.ExeArgs)
		
	
	case 6:
		
		
			return (*types.Int)(&r.Uid)
		
	
	case 7:
		
		
			return (*types.String)(&r.UserName)
		
	
	case 8:
		
		
			return (*types.Int)(&r.Gid)
		
	
	case 9:
		
		
			return (*types.String)(&r.GroupName)
		
	
	case 10:
		
		
			return (*types.Boolean)(&r.Tty)
		
	
	case 11:
		
			r.ContainerId = NewUnionNullString()

		
		
			return r.ContainerId
		
	
	}
	panic("Unknown field index")
}

func (r *Process) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *Process) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Process) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Process) Finalize() { }


func (_ *Process) AvroCRC64Fingerprint() []byte {
  return []byte(ProcessAvroCRC64Fingerprint)
}
