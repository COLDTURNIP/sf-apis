// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type ProcessEvent struct {

	
	
		ProcOID *OID
	

	
	
		Ts int64
	

	
	
		Tid int64
	

	
	
		OpFlags int32
	

	
	
		Args []string
	

	
	
		Ret int32
	

}

const ProcessEventAvroCRC64Fingerprint = "\xa3\x98\xb0\xfe\x1do+\xd9"

func NewProcessEvent() (*ProcessEvent) {
	return &ProcessEvent{}
}

func DeserializeProcessEvent(r io.Reader) (*ProcessEvent, error) {
	t := NewProcessEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeProcessEventFromSchema(r io.Reader, schema string) (*ProcessEvent, error) {
	t := NewProcessEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeProcessEvent(r *ProcessEvent, w io.Writer) error {
	var err error
	
	err = writeOID( r.ProcOID, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Ts, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Tid, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.OpFlags, w)
	if err != nil {
		return err
	}
	
	err = writeArrayString( r.Args, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.Ret, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *ProcessEvent) Serialize(w io.Writer) error {
	return writeProcessEvent(r, w)
}

func (r *ProcessEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"procOID\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"ts\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"tid\",\"type\":\"long\"},{\"name\":\"opFlags\",\"type\":\"int\"},{\"name\":\"args\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"ret\",\"type\":\"int\"}],\"name\":\"sysflow.event.ProcessEvent\",\"type\":\"record\"}"
}

func (r *ProcessEvent) SchemaName() string {
	return "sysflow.event.ProcessEvent"
}

func (_ *ProcessEvent) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetInt(v int32) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetLong(v int64) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetString(v string) { panic("Unsupported operation") }
func (_ *ProcessEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ProcessEvent) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.ProcOID = NewOID()

		
		
			return r.ProcOID
		
	
	case 1:
		
		
			return (*types.Long)(&r.Ts)
		
	
	case 2:
		
		
			return (*types.Long)(&r.Tid)
		
	
	case 3:
		
		
			return (*types.Int)(&r.OpFlags)
		
	
	case 4:
		
			r.Args = make([]string, 0)

		
		
			return (*ArrayStringWrapper)(&r.Args)
		
	
	case 5:
		
		
			return (*types.Int)(&r.Ret)
		
	
	}
	panic("Unknown field index")
}

func (r *ProcessEvent) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *ProcessEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ProcessEvent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *ProcessEvent) Finalize() { }


func (_ *ProcessEvent) AvroCRC64Fingerprint() []byte {
  return []byte(ProcessEventAvroCRC64Fingerprint)
}
